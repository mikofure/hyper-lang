// Hyper Base Library - lib/index.hxp
// Main entry point for all Hyper language libraries

// Re-export all library modules
export * from './mikohyper/core.hxp';
export * from './gui/components.hxp';
export * from './http/client.hxp';
export * from './systemio/index.hxp';

// Convenience imports
import * as Core from './mikohyper/core.hxp';
import * as GUI from './gui/components.hxp';
import * as HTTP from './http/client.hxp';
import * as SystemIO from './systemio/index.hxp';

module hyper {
    // Main Hyper library namespace
    export namespace lib {
        // Core runtime and utilities
        export const core = Core;
        
        // GUI components and rendering
        export const gui = GUI;
        
        // HTTP client functionality
        export const http = HTTP;
        
        // System I/O operations
        export const systemio = SystemIO;
        
        // Library information
        export const version = '1.0.0';
        export const name = 'Hyper Base Library';
        export const description = 'Core libraries for the Hyper programming language';
        
        // Quick access to commonly used functionality
        export const {
            createValue,
            isType,
            typeOf,
            createError,
            MemoryManager,
            ModuleRegistry
        } = Core;
        
        export const {
            createElement,
            createTextNode,
            render,
            Component,
            EventSystem
        } = GUI;
        
        export const {
            createHttpClient,
            HttpClient,
            handleHttpError
        } = HTTP;
        
        export const {
            systemio,
            readTextFile,
            writeTextFile,
            exec,
            ping,
            env,
            cwd,
            exists,
            join,
            resolve
        } = SystemIO;
        
        // Utility functions for library management
        export function getLibraryInfo(): {
            name: string,
            version: string,
            description: string,
            modules: string[],
            platform: string
        } {
            return {
                name,
                version,
                description,
                modules: ['core', 'gui', 'http', 'systemio'],
                platform: SystemIO.getPlatform()
            };
        }
        
        export function checkCompatibility(): {
            compatible: boolean,
            platform: string,
            features: {
                gui: boolean,
                http: boolean,
                systemio: boolean,
                fileSystem: boolean,
                network: boolean,
                process: boolean
            }
        } {
            const platform = SystemIO.getPlatform();
            const isBrowser = platform === 'browser';
            const isNode = platform === 'node';
            
            return {
                compatible: isBrowser || isNode,
                platform,
                features: {
                    gui: true, // Available on all platforms
                    http: true, // Available on all platforms
                    systemio: true, // Available but limited on browser
                    fileSystem: isNode, // Full support only on Node.js
                    network: true, // Available but limited on browser
                    process: isNode // Only available on Node.js
                }
            };
        }
        
        // Initialize library
        export function initialize(options?: {
            memoryLimit?: number,
            enableDebug?: boolean,
            platform?: 'auto' | 'browser' | 'node'
        }): Promise<void> {
            return new Promise((resolve, reject) => {
                try {
                    const opts = {
                        memoryLimit: 100 * 1024 * 1024, // 100MB default
                        enableDebug: false,
                        platform: 'auto',
                        ...options
                    };
                    
                    // Initialize memory manager
                    if (opts.memoryLimit > 0) {
                        Core.MemoryManager.setLimit(opts.memoryLimit);
                    }
                    
                    // Set debug mode
                    if (opts.enableDebug) {
                        // Enable debug logging
                        console.log('Hyper Library initialized in debug mode');
                    }
                    
                    // Check platform compatibility
                    const compatibility = checkCompatibility();
                    if (!compatibility.compatible) {
                        throw Core.createError(
                            `Unsupported platform: ${compatibility.platform}`,
                            'PLATFORM_NOT_SUPPORTED',
                            { platform: compatibility.platform }
                        );
                    }
                    
                    resolve();
                } catch (error) {
                    reject(error);
                }
            });
        }
        
        // Cleanup library resources
        export function cleanup(): void {
            try {
                // Cleanup memory manager
                Core.MemoryManager.cleanup();
                
                // Clear module registry
                Core.ModuleRegistry.clear();
                
                console.log('Hyper Library cleanup completed');
            } catch (error) {
                console.error('Error during library cleanup:', error);
            }
        }
        
        // Error handling
        export function handleError(error: any): {
            message: string,
            code?: string,
            context?: any,
            stack?: string
        } {
            if (Core.isHypError(error)) {
                return {
                    message: error.message,
                    code: error.code,
                    context: error.context,
                    stack: error.stack
                };
            } else if (error instanceof Error) {
                return {
                    message: error.message,
                    stack: error.stack
                };
            } else {
                return {
                    message: String(error)
                };
            }
        }
        
        // Development utilities
        export namespace dev {
            export function benchmark<T>(fn: () => T, name?: string): T {
                const start = performance.now();
                const result = fn();
                const end = performance.now();
                
                console.log(`${name || 'Function'} executed in ${end - start}ms`);
                return result;
            }
            
            export async function benchmarkAsync<T>(fn: () => Promise<T>, name?: string): Promise<T> {
                const start = performance.now();
                const result = await fn();
                const end = performance.now();
                
                console.log(`${name || 'Async function'} executed in ${end - start}ms`);
                return result;
            }
            
            export function memoryUsage(): {
                used: number,
                limit: number,
                percentage: number
            } {
                const used = Core.MemoryManager.getUsage();
                const limit = Core.MemoryManager.getLimit();
                
                return {
                    used,
                    limit,
                    percentage: (used / limit) * 100
                };
            }
            
            export function moduleInfo(): {
                loaded: string[],
                count: number
            } {
                const modules = Core.ModuleRegistry.getLoadedModules();
                
                return {
                    loaded: modules,
                    count: modules.length
                };
            }
        }
    }
    
    // Export the main library namespace
    export default lib;
}

// Default export for convenience
export default hyper.lib;